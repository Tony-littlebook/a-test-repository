说明：整理leetcode刷题笔记，序号为题号，记录相关注释

1.两数之和
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个整数，并返回他们的数组下标。
//利用Map边加入新数边核对是否有符合要求的数，只遍历一次即可实现
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> ans = new HashMap<>();
    	int len = nums.length;
    	for(int i = 0; i<len; i++ ) {
    		if(ans.containsKey(target - nums[i]))
    			return new int[] {ans.get(target - nums[i]),i};
    		ans.put(nums[i], i);
    	}
    	return null;   
    }
}

2.两链表数相加
给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {//将每个结点视作一个循环不变体，利用递归的方法实现
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null)//先处理有空链表的特殊情况，下面有控制null的方法，
            return l2;//但第一个结点是否出现null无法控制
        if(l2 == null)
            return l1;
        int num = l1.val + l2.val;
         ListNode cur = new ListNode(num % 10);//处理next可能为null的情况
        if(l1.next == null && l2.next != null)
            l1.next = new ListNode(0);
        if(l1.next != null && l2.next == null)
            l2.next = new ListNode(0);
        if(l1.next == null && l2.next == null){
            if(num >= 10)
                cur.next = new ListNode(1);
            return cur; 
        }
        if(num >= 10)//进位放置在下一结点处理
            l1.next.val++;
        cur.next = addTwoNumbers(l1.next, l2.next);
        return cur;
    }
}

3.无重复字符的最长字串
给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。
//利用一个deadlength和一个alivelength分别记录之前遍历的最长无重复字符串和
//现在正在考查的无重复字符串，应注意字符串
//遇到重复字符而“死亡”后的重启位置
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() == 0) return 0;
        if(s.length() == 1) return 1;
        int deathlength = 0;
        int alivelength = 1;
        int i,j;
        int location = 0;
        int size = s.length();
        for(i = 1; i < size; ++i){
            boolean change = true;
            for(j = location; j < i; ++j){
                if(s.charAt(j) == s.charAt(i)){
                    if(alivelength > deathlength){
                        deathlength = alivelength;
                    } 
                    change = false;
                    location = j + 1;
                }
            }
           if(change)
               alivelength++;
           else
               alivelength = i - location + 1;
        }
        if(alivelength  > deathlength)
            return alivelength;
        else 
            return deathlength;
    }
}

7.整数反转
给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。
//注意类型转换，将result声明为long为不出现overflow
class Solution {
    public int reverse(int x) {
        int addNum = 0;
    	long result = 0;
    	while(x != 0){
        addNum = x % 10;//分离出最低位
    	  x = ( x - addNum ) / 10;//去除最低位
    	  result = 10 * result + addNum;
    	}
    	if((result < (-1) * Math.pow(2, 31)) || (result > (Math.pow(2,31)-1)))
    		return 0;
    	return (int)result;
    }
}

9.回文数
判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
//将其反转后与原数比较是否相同
class Solution {
    public boolean isPalindrome(int x) {
        if(x < 0)
    		return false;
    	int result = 0;
    	int num = x;
    	while(x != 0){
    		result = result * 10 + x % 10;
    		x = ( x - x % 10 ) / 10;
    	}
    	if(result == num)
    		return true;
    	else
    		return false;  
    }
}

11.盛最多水的容器
给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
//容积受制于最短的板，只需每次换掉短板进行新的尝试
//从两边不断向内逼近，能保证最大容积一定是volume或在之后的遍历中
class Solution {
    public int maxArea(int[] height) {
        int volume = 0;
        int r = 0;
        int s = height.length - 1;
        while(s > r){
          volume = Math.max(volume,Math.min(height[r],height[s])*(s - r));
          if(height[r] < height[s])
            r++;
          else
            s--;
        }
        return volume;
        
    }
}

14.最长公共前缀
编写一个函数来查找字符串数组中的最长公共前缀。
如果不存在公共前缀，返回空字符串 ""。
//遍历所有字符串所有字符，相同加入ans不相同终止，常规方法
class Solution {
    public String longestCommonPrefix(String[] strs) {
        String ans = "";
        if(strs.length == 0)
          return ans;
        if(strs.length == 1)
          return strs[0];
        int numMin = strs[0].length();
        for(int i = 1; i < strs.length; i++){
          numMin = Math.min(numMin,strs[i].length());
        }
        for(int i = 0; i < numMin; i++) {
        	boolean s = true;
        	for(int j = 0; j < strs.length; j++) {
        		if(strs[0].charAt(i) != strs[j].charAt(i)) {
        			s = false;
        			break;
        		}
        	}
          if(!s)
            break;
          ans += strs[0].charAt(i);          
        }
        return ans;
        
    }
}

20.有效的括号
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。
有效字符串需满足：
左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。
//比较容易想到用栈来实现，遇到配对则弹出，最后检查是否为空；
//注意先stack.push('c')以防栈为空时stack.peek()出错
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>();
        int length = s.length();
        stack.push('c');
        for(int i = 0; i < length; i++){
            char ch1 = stack.peek();
            char ch2 = s.charAt(i);
            if(ch2 == ')' && ch1 == '(')
                stack.pop();
            else if(ch2 == '}' && ch1 == '{')
                stack.pop();
            else if(ch2 == ']' && ch1 == '[')
                stack.pop();
            else
                stack.push(ch2);
        }
        stack.pop();
        return stack.isEmpty();
    }
}

21.合并两个有序链表
将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。
//链表操作比较繁琐但不难，构思好即可，较典型
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode p;
        ListNode ans;
        if(l1 == null)
          return l2;
        if(l2 == null)
          return l1;
        if(l1.val <= l2.val)
          ans = l1;
        else
          ans = l2;
        while(l1 != null && l2 != null){
          while(l1.val <= l2.val){
            p = l1;
            l1 = l1.next;
            if(l1 == null){//处理了l1结点为null
              p.next = l2;
              return ans;
            }
            if(l1.val > l2.val )
            p.next = l2;//将链表接到l2
          }
          while(l2.val < l1.val){
            p = l2;
            l2 = l2.next;
            if(l2 == null){
              p.next =l1;
              return ans;
            }
            if(l2.val >= l1.val)
              p.next = l1;
          }
        }
      return ans;
      
      }
  }

26.删除排序数组中的重复项
给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
//设置一块一慢两个指针，慢指针指向存储单元快指针指向遍历的数组元素
class Solution {
    public int removeDuplicates(int[] nums) {
    if (nums.length == 0) return 0;
    int i = 0;
    for (int j = 1; j < nums.length; j++) {
        if (nums[j] != nums[i]) {
            i++;
            nums[i] = nums[j];
        }
    }
    return i + 1;
    }
}

27.移除元素
给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
//与前一题思路相同，一次遍历，遍历的方法方向有讲究，边遍历边做相关操作
class Solution {
    public int removeElement(int[] nums, int val) {
        int r = 0;
        for(int i = 0; i < nums.length; ++i){
            if(nums[i] != val){
              nums[r] = nums[i];
              r++;
            }
        }
        return r;
    }
}

28.实现strStr()函数
给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。
//此题较纠结
class Solution {
    public int strStr(String haystack, String needle) {
        int p = 0;//指向haystack字符的指针
        int q = 0;//指向needle字符的指针
        int k = 0;//保存每次尝试的p的初始值
        int haylen = haystack.length();
        int neelen = needle.length();
        if(neelen == 0)
            return 0;
        if(haylen < neelen)
            return -1;
        while(p < haylen){
            if(haystack.charAt(p) == needle.charAt(0)){
                k = p;
                q = 0;
                while( q < neelen && p < haylen &&
                      haystack.charAt(p) == needle.charAt(q)){
                    p++;
                    q++;
                }
                if(q == neelen)
                    return k; 
                 if(p != haylen)//可以证明在更前的情况下都不能达到相应长度则k+1更不可能，即若p = haylen 终止
                    p = k + 1;
                continue;
            }
            p++;
            
        }
        return -1;
        
            
    }
}

35.搜索插入位置
给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。
你可以假设数组中无重复元素。
class Solution {
    public int searchInsert(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;
        int mid;
        while(low < high){
          mid = low + (high - low) / 2;
          if(nums[mid] > target)//高值不会被下次迭代中检查；
              high = mid;
          else if(nums[mid] < target)//低值则会在下一次迭代中被检查；
              low = mid + 1;
          else
              return mid;
        }
        if(high == nums.length - 1 && nums[high] < target)//注意最高值不会被检查
          return nums.length;
        return low;
    }
}

36.报数
报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：
1.     1
2.     11
3.     21
4.     1211
5.     111221
//按照题目逻辑实现，用到了StringBuider。
//String 类型和 StringBuffer 类型的
//要性能区别其实在于 String 是不可变的对象, 因此在每次对 String 类型进行
//变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String //对象，所以经常改变内容的字符串最好不要用 String ，每次结果都会对 //StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。
//java.lang.StringBuilder一个可变的字符序列是5.0新增的。此类提供一个与 //StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个
//简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可
//能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快。
class Solution {
    public String countAndSay(int n) {
         String initNum = "1";
        if(n == 1)
        	return initNum;
    	for(int i = 1; i < n; i++) {
    		char c = initNum.charAt(0);
    		int count = 0;
    		StringBuilder temp = new StringBuilder();
        	for(int s = 0;s < initNum.length(); s++) {
        		if(c == initNum.charAt(s)) 
        			count++;
        		else {
        			temp.append(String.valueOf(count) + c);
        			c = initNum.charAt(s);
        			count =1;
        		}
        	}
        	temp.append(String.valueOf(count) + c);
        	initNum = temp.toString();
        	//System.out.println(initNum);
        }
    	return initNum;
        
    }
}

53.最大子序列
给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
//贪心算法；最大子序列一定不会包含其前面序列或其任意子序列
//面向过程，动态思考
class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0];
        int sum = 0;
        for(int num : nums){
            sum += num;
            max = Math.max(max, sum);
            if(sum <= 0)
                sum = 0;
        }
        return max;
    }
}

55.跳跃游戏
给定一个非负整数数组，你最初位于数组的第一个位置。
数组中的每个元素代表你在该位置可以跳跃的最大长度。
判断你是否能够到达最后一个位置。
//逆向思考
//从更近的格子能跳过来，如果有更远的格子能跳过来，则
//更远的格子一定能跳到更近的格子
//所以这个算法是安全的
class Solution {
    public boolean canJump(int[] nums) {
        if(nums.length == 0)
            return false;
        int destination = nums.length -1;
        int i = destination - 1;
        while(destination > 0 && i >= 0){
            if(nums[i] >= destination - i)
                destination = i;
            i--;
        }
        return destination == 0;      
    }
}

58.最后一个单词的长度
给定一个仅包含大小写字母和空格 ' ' 的字符串，返回其最后一个单词的长度。
如果不存在最后一个单词，请返回 0 。
说明：一个单词是指由字母组成，但不包含任何空格的字符串。
//常规方法，设置一个变量判断字符是否为单词第一个字母
//还可以从后面开始遍历
class Solution {
    public int lengthOfLastWord(String s) {
        int length = s.length();
        int res = 0;
        boolean isFirst = true;
        for(int i = 0; i < length; ++i){
            if(s.charAt(i) == ' '){
                isFirst = true;
                continue;
            }
            else if(isFirst){
                res = 1;
                isFirst = false;
            }
            else
                res++;
        }
        return res;
    }
}

66.加1
给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。
最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。
你可以假设除了整数 0 之外，这个整数不会以零开头。
//结构很优化，省去不必要的判断语句
class Solution {
    public int[] plusOne(int[] digits) {
        int i;
        for(i = digits.length - 1; i >= 0; --i){
          if(digits[i] != 9){
            digits[i]++;
            return digits;
          }
          digits[i] = 0;
        }
        int [] nums = new int [digits.length + 1];
        nums[0] = 1;
        for(int j = 1; j < nums.length; ++j)
          nums[j] = 0;
        return nums;
    }
}

67.二进制求和
给定两个二进制字符串，返回他们的和（用二进制表示）。
输入为非空字符串且只包含数字 1 和 0。
//核心思想是用三个指针进行操作；
//加一个变量记录进位值
class Solution {
    public String addBinary(String a, String b) {
        int p = a.length() - 1;
        int q = b.length() - 1;
        int y = 0;
        int carry = 0;//进位
        char[] ans = new char[Math.max(p,q) + 2];
        while(p >= 0 || q >= 0 || carry == 1){
            int i = 0;
            int j = 0;
            if(p >= 0)//注意此处实现策略
                i = (a.charAt(p) == '1')? 1:0;
            if(q >= 0)
                j = (b.charAt(q) == '1')? 1:0;
            p--;
            q--;
            int k = i + j + carry;
            carry = (k >= 2)? 1:0;
            String temp = String.valueOf(k%2);//注意此处实现
            ans[y] = temp.charAt(0);
            y++;
        }
        char[] res = new char[y];
        for(int i = 0; i < y; ++i)
            res[y - i - 1] = ans[i];
        return String.valueOf(res);
    }
}

70.爬楼梯

假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
//递归式f(n) = f(n - 1) + f(n - 2)；
//斐波那契数列；
//多角度思考寻找递归式；
class Solution {
    public int climbStairs(int n) {
        if(n == 1)
          return 1;
        int r = 1;
        int l = 1;
        int ans = 0;
        for(int i = 2; i <= n; i++){
          ans = r + l;
          l = r;
          r = ans;
        }
        return ans;
        
    }
}

(栈)496.下一个更大的元素I
给定两个没有重复元素的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。
nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出-1。
//先入为主，先找到num2每个元素对应的答案，利用栈；
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack<Integer> stack = new Stack<Integer>();
        HashMap<Integer, Integer> hasMap = new HashMap<Integer, Integer>();
        
        int[] result = new int[nums1.length];
        
        for(int num : nums2) {
                 while(!stack.isEmpty() && stack.peek()<num){//由栈底至栈顶递减，可确保安全性；
                hasMap.put(stack.pop(), num);
            }
            stack.push(num);
        }
        
        for(int i = 0; i < nums1.length; i++) result[i] =    hasMap.getOrDefault(nums1[i], -1);
            
        return result;
    }
}
//暴力求解
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        boolean occur;
        int length1 = nums1.length;
        int length2 = nums2.length;
        int[] res = new int[length1];
        for(int i = 0; i < length1; ++i){
            occur = false;
            int num = nums1[i];
            res[i] = -1;
            for(int j = 0; j < length2; ++j){
                if(nums2[j] == num)
                    occur = true;
                if(occur && nums2[j] > num){
                    res[i] = nums2[j];
                    break;
                }
            }
        }
        return res;
    }
}

225.用队列实现栈
使用队列实现栈的下列操作：
push(x) -- 元素 x 入栈
pop() -- 移除栈顶元素
top() -- 获取栈顶元素
empty() -- 返回栈是否为空
注意:
你只能使用队列的基本操作-- 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。
你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。
你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。
//插入操作，每次进队都通过循环出队进队操作，将队尾元素置前；
class MyStack {
    private Queue<Integer> queue;
    /** Initialize your data structure here. */
    public MyStack() {
        queue = new LinkedList<>();
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        queue.add(x);        
        int length = queue.size();
        for(int i = 0; i < length - 1; ++i){
            queue.add(queue.poll());
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        return queue.poll();
    }
    
    /** Get the top element. */
    public int top() {
        return queue.peek();
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
        return queue.isEmpty();
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */